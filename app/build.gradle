plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

task mergeGJAssets {
    doLast {
        String gjAssetsDir = project.projectDir.path + "/src/full/gjAssets"
        String customAssetsDir = project.projectDir.path + "/src/main/assets"
        String assetsDir = project.projectDir.path + "/src/full/assets"

        groovy.ant.AntBuilder ant = new groovy.ant.AntBuilder()

        ant.copy(todir:assetsDir) {
            fileset(dir:gjAssetsDir)
        }

        ant.copy(todir:assetsDir, overwrite:true) {
            fileset(dir:customAssetsDir)
        }
    }
}

task cleanGJAssets {
    doLast {
        String assetsDir = project.projectDir.path + "/src/full/assets"

        new groovy.ant.AntBuilder().delete(dir:assetsDir)
    }
}

android {
    signingConfigs {
        release {
            def properties = new Properties()
            def signingInputStream = new FileInputStream(file("signing.properties"))
            properties.load(signingInputStream)

            storeFile = file(properties["storeFile"])
            storePassword = properties["storePassword"]
            keyAlias = properties["keyAlias"]
            keyPassword = properties["keyPassword"]
        }
    }
    compileSdk 33
    ndkVersion "17.2.4988734"

    defaultConfig {
        applicationId "com.kyurime.geometryjump"
        minSdk 14
        targetSdk 33
        versionCode 37
        versionName "u8.1.4"

        vectorDrawables {
            useSupportLibrary true
        }

        ndk {
            abiFilters "armeabi-v7a"
        }
        externalNativeBuild {
            cmake {
                arguments "-DGDMOD_USE_CRASH_DUMPS=OFF", "-DGDMOD_USE_IMGUI=ON", "-DGDMOD_USE_SPDLOG=ON"
            }
        }

        defaultConfig {
            buildConfigField("boolean", "IS_LAUNCHER", "false")
        }

        signingConfig signingConfigs.release
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            externalNativeBuild {
                cmake {
                    arguments "-DGDMOD_USE_CRASH_DUMPS=ON", "-DGDMOD_CRASH_UPLOAD_URL:STRING=https://api.xyze.dev/gd/crash?hash=%s-%s", "-DGDMOD_USE_IMGUI=OFF", "-DGDMOD_USE_SPDLOG=OFF"
                }
            }
        }

        development {
            externalNativeBuild {
                cmake {
                    arguments "-DGDMOD_USE_CRASH_DUMPS=OFF", "-DGDMOD_CRASH_UPLOAD_URL:STRING=https://api.xyze.dev/gd/crash?hash=%s-%s", "-DGDMOD_USE_IMGUI=ON", "-DGDMOD_USE_SPDLOG=ON", "-DCMAKE_BUILD_TYPE=RelWithDebInfo"
                }
            }
            debuggable true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.18.1'
        }
    }
    androidResources {
        ignoreAssetsPattern '.keep'
    }
    namespace 'com.kyurime.geometryjump'

    flavorDimensions += "type"
    productFlavors {
        create("full") {
        }
        create("launcher") {
            applicationIdSuffix = ".launcher"
            versionNameSuffix = "-launcher"
            buildConfigField("boolean", "IS_LAUNCHER", "true")
        }
    }

    applicationVariants.all { variant ->
        if (variant.name.startsWith("full")) {
            tasks["merge${variant.name.capitalize()}Assets"]
                    .dependsOn(mergeGJAssets)
        }
        tasks["clean"].dependsOn(cleanGJAssets)
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.fragment:fragment-ktx:1.5.5'
    implementation "androidx.documentfile:documentfile:1.0.1"
    implementation 'androidx.appcompat:appcompat:1.6.0'
    implementation files('../libs/fmod.jar')
}